%{

#include <iostream>
#include <vector>
#include <utility>
#include <stdlib.h>
#include <string>
#include <algorithm>
#include "source.hpp"
#include "output.hpp"
#include "parser.hpp"
#include "mips.h"

using namespace std;
using namespace Parser;
using namespace output;

extern int yylineno;
int yylex();
void yyerror(char const * message);

int precondCnt = 0;
int whileLoopCnt = 0;
string currentReturnType;

bool isDevStage = false; // todo: change to false to turn off debugging cout's

//HW5:
int stringCnt = 0;

Mips m = Mips();
CodeBuffer &cf = m.cf;

%}


%token VOID INT BYTE B BOOL AND OR TRUE FALSE RETURN IF WHILE BREAK CONTINUE PRECOND SC COMMA LPAREN RPAREN LBRACE RBRACE RELOP BINOP ID NUM STRING ASSIGN END_OF_FILE

/* Solving conflicts */
// Exp rules related conflicts
%right ASSIGN
%left  OR //check if needs to be right assoc
%left AND //check if needs to be right assoc
%nonassoc RELOP
%left BINOP
%right NOT

%nonassoc CONFLICT
%nonassoc ELSE


%%

Program : M Funcs END_OF_FILE
{
    if (!checkMainFuncLegal())
    {
        errorMainMissing();
        exit(0);
    }

    // end of global scope
    if (isDevStage) {
       cout << "DEBUG: end of global scope" << endl;
    }
    endScope();
    closeScope(); // pop symbol & offset tables

    return 0;
}
;

M : %empty
{
    // start of global scope
    if (isDevStage) {
        cout << "DEBUG: start of global scope" << endl;
    }
	openGlobalScope();

	// push print to global scope stack
	pushFunctionDeclarationWithoutOpenScope("VOID", "print");

	// push printi to global scope stack
	pushFunctionDeclarationWithoutOpenScope("VOID", "printi");

	// HW5
	initRegisters();

    // print
    cf.emit("_print:");
    cf.emit("lw $a0, 0($sp)"); // $a0 = 0($sp)
    cf.emit("li $v0, 4");
    cf.emit("syscall");
    cf.emit("jr $ra");

    // printi
    cf.emit("_printi:");
    cf.emit("lw $a0, 0($sp)"); //load argument value to a0 from 0(sp)
    cf.emit("li $v0, 1"); //load the service number for syscall
    cf.emit("syscall");
    cf.emit("jr $ra");

    // Division by zero handler
    cf.emitData("div_by_zero_error: .asciiz \"Error division by zero\\n\"");
    cf.emit("div_zero:");
    cf.emit("la $a0, div_by_zero_error");
    cf.emit("li $v0, 4"); // Syscall to print
    cf.emit("syscall");
    cf.emit("li $v0, 10"); // Syscall to terminate
    cf.emit("syscall");
}
;

//HW5:
NewLabel : %empty
{
    $$ = new Type();
	$$->label = cf.genLabel();
}

NewNextList : %empty
{
    $$ = new Type();
    $$->next_list = cf.makelist(cf.emit("j  "));
}
;

NewWhile : %empty
;

Funcs : %empty | FuncDecl Funcs  //DONE! no need to change
;

FuncDecl : RetType ID LPAREN Formals RPAREN
{
	// check if id is free
	NameTypeInfo* id = dynamic_cast<NameTypeInfo*>($2);
    string name = id->name;

	if (!checkFuncIdFree(name) || !checkIdFree(name))
	{
	    errorDef(yylineno,name);
	    exit(0);
	}

	// get parameters from input
	string retType = $1->type;
	MultiNameMultiTypeInfo* formals = dynamic_cast<MultiNameMultiTypeInfo*>($4);
	vector<pair<string, string> > args = formals->types_names;

	$$ = new FuncInfo(name,retType,args);

	// push function to global scope symbol table and open new scope for arguments
	pushFunctionDeclarationToStackAndOpenScope(retType, name, args);

    // start of function scope starts here
    if (isDevStage) {
            cout << "DEBUG: start of function scope: " << name << endl;
    }

    // HW5:
    if (name == "main") {
        cf.emit("main:");
    }
    else {
        cf.emit("_" + name + ":");
    }

    //set frame for calle
    m.debugPrint("Calle's (" + name + ") frame start (FP=SP)");
    cf.emit("subu $fp, $sp, 4"); // move the fp

} PreConditions LBRACE Statements RBRACE {
	NameTypeInfo* id = dynamic_cast<NameTypeInfo*>($2);
	string name = id->name;
    currentReturnType = "";

    // HW5:
    m.bpatch($9->next_list,cf.genLabel()); //todo: check if this is correct

    endScope(); // print "end scope" message
    printPreconditions(name, precondCnt); // print num of precondition
	closeScope(); // pop symbol & offset tables

    // end of function scope starts here
    if (isDevStage) {
        cout << "DEBUG: end of function scope: " << name << endl;
    }

    //HW5
    clearTempRegisters();
    cf.emit("jr $ra");
}
;

RetType : Type {$$ = $1; currentReturnType = $1->type;} | VOID {$$ = new Type("VOID"); currentReturnType = "VOID";}
;

Formals : %empty
{
	$$ = new MultiNameMultiTypeInfo();
}
| FormalsList
{
	$$ = $1;
}
;

FormalsList : FormalDecl
{
	NameTypeInfo* formalDec = dynamic_cast<NameTypeInfo*>($1);
	vector<pair<string,string> > v;
	v.push_back(pair<string,string>(formalDec->type, formalDec->name));

	$$ = new MultiNameMultiTypeInfo(v);
}
| FormalDecl COMMA FormalsList
{
	MultiNameMultiTypeInfo* formalList = dynamic_cast<MultiNameMultiTypeInfo*>($3);
	NameTypeInfo* formalDec = dynamic_cast<NameTypeInfo*>($1);
	vector<pair<string,string> > v(formalList->types_names);
	v.push_back(pair<string,string>(formalDec->type,formalDec->name));

	$$ = new MultiNameMultiTypeInfo(v);
}
;

FormalDecl : Type ID
{
	NameTypeInfo* id = dynamic_cast<NameTypeInfo*>($2);

    // check id is free
    if (!checkIdFree(id->name) || !checkFuncIdFree(id->name))
    {
        errorDef(yylineno,id->name);
        exit(0);
    }

	$$ = new NameTypeInfo($1->type, id->name);
}
;

PreConditions : %empty
{
	precondCnt = 0;

	//todo: hw5
}
| PreConditions PreCondition
{
	precondCnt++;

	//todo: hw5
}
;

PreCondition : PRECOND LPAREN Exp RPAREN
{
	if (getExpType($3) != "BOOL") {
	    errorMismatch(yylineno);
	    exit(0);
	}
	$$ = $3;

	//todo: hw5
}
;

Statements : Statement
{
    $$ = $1;
}
| Statements
{
    if ($1->next_list.size() > 0)
        m.bpatch($1->next_list,cf.genLabel());
} Statement
{
    //cout << "here 2" << endl;
    $$ = $1;
    //todo check if this is correct
    $$->next_list = $3->next_list;
    $$->break_list = cf.merge($1->break_list,$3->break_list);
    $$->continue_list = cf.merge($1->continue_list,$3->continue_list);
}
;

Statement : LBRACE {
    // start of block scope
    if (isDevStage) {
        cout << "DEBUG: start of block scope" << endl;
    }
    openScope();
} Statements {
    // end of block scope
    if (isDevStage) {
        cout << "DEBUG: end of block scope" << endl;
    }
    endScope(); // print "end scope" message
    closeScope();
} RBRACE NewLabel {
    // HW5:
    m.bpatch($3->next_list,$6->label);
    $$ = $3;
    $$->next_list = vector<int>();
}
| Type ID SC
{
	NameTypeInfo* id = dynamic_cast<NameTypeInfo*>($2);
    string name = id->name;

    // check id is free
    if (!checkIdFree(name) || !checkFuncIdFree(name))
    {
        errorDef(yylineno,name);
        exit(0);
    }

	pushIdentifierToStack($1->type,id->name);

	// HW5:
	$$ = new Type();
    cf.emit("subu $sp, $sp, 4"); // Move stack pointer
    cf.emit("sw $0, 0($sp)"); // Initialize to zero
}
| Type ID ASSIGN Exp SC
{
	NameTypeInfo* id = dynamic_cast<NameTypeInfo*>($2);
	string name = id->name;

    // check id is free
    if (!checkIdFree(name) || !checkFuncIdFree(name))
    {
        errorDef(yylineno,name);
        exit(0);
    }

    if (!isValidAssigment($1, $4)) {
        errorMismatch(yylineno);
        exit(0);
    }

	pushIdentifierToStack($1->type,id->name);

	//HW5:
	m.debugPrint("Type ID ASSIGN Exp SC");
    m.assignExpressionToId(name, $4, $$, true);
}
| ID ASSIGN Exp SC
{
	NameTypeInfo* id = dynamic_cast<NameTypeInfo*>($1);
    string name = id->name;

    // check id is defined
    if (checkIdFree(name))
    {
        errorUndef(yylineno,name);
        exit(0);
    }

    if (!isValidAssigment($1, $3)) {
        errorMismatch(yylineno);
        exit(0);
    }

    // HW5:
    m.assignExpressionToId(name, $3, $$, false);
}
| Call SC
{
    // HW5:
    $$ = new Type();
    setRegister($1->reg,true);
    $$->next_list = cf.merge($1->true_list,$1->false_list);
}
| RETURN SC 
{
	if (currentReturnType!="VOID")
	{
		errorMismatch(yylineno);
		exit(0);
	}

	$$ = new Type();
//	m.jump(RA);
}
| RETURN Exp SC 
{
    if (currentReturnType!="INT" && currentReturnType != "BYTE" && currentReturnType != "BOOL")
    {
        errorMismatch(yylineno);
        exit(0);
    }
    if (!isValidReturn(currentReturnType,$2))
    {
        errorMismatch(yylineno);
    		exit(0);
    }

    // HW5:
    string type = getExpType($2);
    if (type == "BOOL")
    {
        m.bpatch($2->true_list,cf.genLabel());
        cf.emit("li $v0, 1");
        int quad = cf.emit("j ");
        m.bpatch($2->false_list,cf.genLabel());
        cf.emit("li $v0, 0");
        m.bpatch(cf.makelist(quad), cf.genLabel());
        cf.emit("jr $ra");
    }
    else
    {
        cf.emit("add $v0, $" + convert_to_string($2->reg) + ", 0");
        m.jump(RA);
    }

    $$ = $2;
}
| WHILE LPAREN Exp RPAREN {
	whileLoopCnt++;
	if (getExpType($3) != "BOOL")
	{
		errorMismatch(yylineno);
		exit(0);
	}
	openScope();
} Statement
{
	whileLoopCnt--;
	endScope();
	closeScope();

	//todo: hw5
}
| BREAK SC 
{
	if (whileLoopCnt == 0)
	{
		errorUnexpectedBreak(yylineno);
		exit(0);
	}

	//todo: hw5
    $$ = new Type();
    $$->break_list = cf.makelist(cf.emit("j "));
}
| CONTINUE SC 
{
	//todo: hw5 while table?
	if (whileLoopCnt == 0)
	{
		errorUnexpectedContinue(yylineno);
		exit(0);
	}

	$$ = new Type();
	$$->continue_list = cf.makelist(cf.emit("j "));
}
| IF LPAREN Exp RPAREN NewLabel {
    if (isDevStage) {
        cout << "DEBUG: start of if scope" << endl;
    }

    if (getExpType($3) != "BOOL") {
        errorMismatch(yylineno);
        exit(0);
    }

    openScope();
} SelectionStatement NewLabel{
    // HW5
    $$ = $7;
    m.bpatch($3->true_list,$5->label);
    m.bpatch($3->false_list,$7->label);
}
;

SelectionStatement: Statement NewLabel // IF without ELSE
{
    if (isDevStage) {
        cout << "DEBUG: end of if scope" << endl;
    }
    endScope(); // print "end scope" message
    closeScope();

    // HW5
    $$ = $1;
    $$->label = $2->label;
    $$->next_list = $1->next_list;
} %prec CONFLICT
| Statement ELSE NewNextList// IF with ELSE
{
    if (isDevStage) {
        cout << "DEBUG: end of if scope (with ELSE)" << endl;
    }

    endScope(); // print "end scope" message
    closeScope();
    openScope();

} NewLabel Statement {
    endScope();
    closeScope();

    // HW5
    $$->label = $5->label;
    $$->next_list = cf.merge(cf.merge($1->next_list, $3->next_list), $6->next_list);
}
;

Call : ID LPAREN ExpList RPAREN
{
	NameTypeInfo* id = dynamic_cast<NameTypeInfo*>($1);
    string name = id->name;

	// check if id is undefined
    if (checkFuncIdFree(name))
    {
        errorUndefFunc(yylineno,name);
        exit(0);
    }

    // check if arguments for function are correct
    NameMultiTypeInfo* expList = dynamic_cast<NameMultiTypeInfo*>($3);
    vector<string> exp_args_types = expList->types;

    if (!checkPrototypeOfFunction(name,exp_args_types))
    {
        vector<string> args = getArgumentTypesOfFunc(name);
        errorPrototypeMismatch(yylineno,name,args);
        exit(0);
    }

    string type = getExpFuncReturnType($1);
    $$ = new Type(type);

    //HW5
    m.functionCall($$, name, expList, type);
}
| ID LPAREN RPAREN
{
	NameTypeInfo* id = dynamic_cast<NameTypeInfo*>($1);
    string name = id->name;

	// check if id is undefined
    if (checkFuncIdFree(name))
    {
        errorUndefFunc(yylineno,name);
        exit(0);
    }

    // check if arguments for function are correct
    vector<string> args_types; //empty vector because function doesn't have any arguments
    if (!checkPrototypeOfFunction(name,args_types))
    {
        vector<string> args = getArgumentTypesOfFunc(name);
        errorPrototypeMismatch(yylineno,name,args);
        exit(0);
    }

    string type = getExpFuncReturnType($1);
    $$ = new Type(type);

   //HW5

   m.debugPrint("Caller's set activation record for " + name);
   // ==================== [Start] Activation record - Caller's frame ====================

   vector<int> backupRegisters;

   m.debugPrint("\t 1. Push saved registers");
   // 1. Push saved registers
   for (int i=8; i<=25; ++i)
   {
       if (isRegisterAvailable(i) == false)
           {
               m.pushToStack(i);
               backupRegisters.push_back(i);
               setRegister(i, true);
               m.debugPrint("\t pushed saved register $" + convert_to_string(i));
           }
   }
   //clearTempRegisters(); // todo add assert - all temp registers are free to use

   m.debugPrint("\t 2. Push caller's fp");
   // 2. Push caller's fp
   m.pushToStack(FP);

   m.debugPrint("\t 3. Push caller's ra");
   // 3. Push caller's ra
   m.pushToStack(RA);

   //cf.emit("subu $fp, $sp, 4"); // start new frame for current function (named ID)

   // ==================== [END] Activation record - Caller's frame ====================

   m.debugPrint("\t --- goto to  " + name + "---");
   if (name == "main") {
       cf.emit("jal main");
   }
   else {
       cf.emit("jal _" + name);
   }
   m.debugPrint("\t --- returned from  " + name + "---");

   // calle done his job ($ra saved on jal) we are back to caller's frame

   // ==================== [Start] Activation record - Caller's frame ====================

   m.debugPrint("\t 3. Pop caller's ra");
   // 3. Pop caller's ra
   m.popFromStack(RA);

   m.debugPrint("\t 2. Pop caller's fp");
   // 2. Pop caller's fp
   m.popFromStack(FP);

   m.debugPrint("\t 1. Pop saved registers");
   // 1. Pop saved registers (Restore saved registers)
   for (int i=0; i < backupRegisters.size(); ++i)
   {
       m.popFromStack(backupRegisters[i]);
       setRegister(backupRegisters[i], false);
       m.debugPrint("\t popped saved register $" + convert_to_string(backupRegisters[i]));
   }

   //cout << "stack size after is: " << m.stack.size() << endl;

   if (type == "BOOL"){
       int quad = cf.emit("beq $v0, 0, ");
       $$->true_list = cf.makelist(cf.emit("j "));
       m.bpatch(cf.makelist(quad),cf.genLabel());
       $$->false_list=cf.makelist(cf.emit("j "));
   }
   else
   {
       // store function result in reg (result was stored on $v0 by calle?)
       int reg = getAvailableRegister();
       setRegister(reg,false);
       m.debugPrint(convert_to_string(reg) + " used for result value of " + name);
       cf.emit("add $" + convert_to_string(reg) + ", $v0, 0");
       $$->reg = reg;
   }
}
;

ExpList : Exp
{
    // HW5:
    string expType = getExpType($1);
    int reg;
    if (expType == "BOOL"){
        reg = getAvailableRegister();
        setRegister(reg,false);
        m.bpatch($1->true_list,cf.genLabel());
        cf.emit("li $" + convert_to_string(reg) + ", 1");
        int quad = cf.emit("j  ");
        m.bpatch($1->false_list,cf.genLabel());
        cf.emit("li $" + convert_to_string(reg) + ", 0");
        m.bpatch(cf.makelist(quad),cf.genLabel());
    }
    else if (expType == "STRING")
    {
        reg = getAvailableRegister();
        setRegister(reg,false);
        cf.emit("la $" + convert_to_string(reg) + ", " + $1->label);
    }
    else reg = $1->reg;

    $$ = new NameMultiTypeInfo(getExpType($1), reg);
}
| NewExp COMMA ExpList
{
    $$ = $1;
	NameMultiTypeInfo* expList = dynamic_cast<NameMultiTypeInfo*>($3);
	vector<string> types = expList->types;
	vector<int> regs = expList->registers; //HW5

    NameMultiTypeInfo* leftExpList = dynamic_cast<NameMultiTypeInfo*>($$);

	for (int i = 0; i < types.size(); i++) {
        leftExpList->types.push_back(types.at(i));
        leftExpList->registers.push_back(regs.at(i));
	}

}
;

NewExp : Exp
{
    // HW5:
    string expType = getExpType($1);
    //cf.emit("DEBUG: expType is: " + expType);
    int reg;
    if (expType == "BOOL"){
        reg = getAvailableRegister();
        setRegister(reg,false);
        m.bpatch($1->true_list,cf.genLabel());
        cf.emit("li $" + convert_to_string(reg) + ", 1");
        int quad = cf.emit("j  ");
        m.bpatch($1->false_list,cf.genLabel());
        cf.emit("li $" + convert_to_string(reg) + ", 0");
        m.bpatch(cf.makelist(quad),cf.genLabel());
    }
    else if (expType == "STRING")
    {
        reg = getAvailableRegister();
        setRegister(reg,false);
        cf.emit("la $" + convert_to_string(reg) + ", " + $1->label);
    }
    else reg = $1->reg;

    $$ = new NameMultiTypeInfo(getExpType($1), reg);
}
;

Type : INT {$$ = new Type("INT");} | BYTE {$$ = new Type("BYTE");} | BOOL {$$ = new Type("BOOL");}
;

Exp : LPAREN Exp RPAREN
{
	$$ = $2;
}
| Exp BINOP Exp
{
	if (!isValidBinOp($1, $3)) {
	    errorMismatch(yylineno);
	    exit(0);
	}
    string type = getExpType($1);
	$$ = new Type(type);

	NameTypeInfo* binop = dynamic_cast<NameTypeInfo*>($2);
	string op = binop->name;
	string cmd;

	if (op == "*") cmd = "mul ";
	if (op == "/") {
	    cf.emit("beqz $" + convert_to_string($3->reg) + ", div_zero");
	    cmd = "div ";
	}
	if (op == "+") cmd = "addu ";
	if (op == "-") cmd = "subu ";


    // e.g.: addu $1,$1,$2 , puts result of addu into $1
    cf.emit(cmd + "$" + convert_to_string($1->reg) + ", $" + convert_to_string($1->reg) + ", $" + convert_to_string($3->reg));

    //set register of 2nd operand as available
    setRegister($3->reg,true);

    if (type == "BYTE")
        cf.emit("and $" + convert_to_string($1->reg) + ", $" + convert_to_string($1->reg) + ", 255");

    $$->reg = $1->reg;
}
| ID
{
	NameTypeInfo* id = dynamic_cast<NameTypeInfo*>($1);
	string name = id->name;
	if (checkIdFree(name))
	{
	    errorUndef(yylineno,name);
	    exit(0);
	}
	//$$ = $1;
	string type = getExpType($1);
	$$ = new Type(type);

    // HW5:
    //allocating new register for local variable
    int reg = getAvailableRegister();
    setRegister(reg,false);
    SymbolTableEntry* e=getIdEntry(name,false);
    m.debugPrint(convert_to_string(reg) + " used for ID: " + name);
    cf.emit("lw $" + convert_to_string(reg) + ", " + convert_to_string((-4)*(e->offset)) + "($fp)");

    if (type == "BOOL")
    {
        $$->true_list = cf.makelist(cf.emit("beq $" + convert_to_string(reg) + ", 1,  "));
        $$->false_list = cf.makelist(cf.emit("j  "));
        setRegister(reg,true);
    }
    else
        $$->reg = reg;

    //cout << "reg: " << reg << endl;
}
| Call
{
	$$ = $1;
}
| NUM
{
	$$ = $1;

    // HW5:
    NameTypeInfo* num = dynamic_cast<NameTypeInfo*>($1);
    int reg = getAvailableRegister();
    $$->reg = reg;
    setRegister(reg,false);
    m.debugPrint(" " + convert_to_string(reg) + " used for NUM");
    // Save NUM's value to register
    cf.emit("li $" + convert_to_string(reg) + ", " + num->name);
}
| NUM B
{
	NameTypeInfo* numId = dynamic_cast<NameTypeInfo*>($1);
	int num = atoi(numId->name.c_str());

	if (num > 255)
	{
		errorByteTooLarge(yylineno,numId->name);
		exit(0);
	}

	$$ = new Type("BYTE");

    // HW5:
    int reg = getAvailableRegister();
    $$->reg = reg;
    setRegister(reg,false);
    cf.emit("li $" + convert_to_string(reg) + ", " + numId->name);
}
| STRING
{
	$$ = new Type("STRING");

	// HW5:
	NameTypeInfo* s = dynamic_cast<NameTypeInfo*>($1);
	string string_content = s->name;
	string label = "string_" + convert_to_string(stringCnt);
	stringCnt++;
	cf.emitData(label + ": .asciiz " + string_content);
	$$->label = label;
}
| TRUE
{
	$$ = new Type("BOOL");

	// HW5:
	$$->true_list = cf.makelist(cf.emit("j "));
}
| FALSE
{
	$$ = new Type("BOOL");

	// HW5:
	$$->false_list = cf.makelist(cf.emit("j "));
}
| NOT Exp
{
	checkExpressionType($2,"BOOL",yylineno);
	$$ = new Type("BOOL");

    // HW5:
    $$->true_list = $2->false_list;
    $$->false_list = $2->true_list;
}
| Exp AND NewLabel Exp
{
	checkExpressionType($1,"BOOL",yylineno);
	checkExpressionType($4,"BOOL",yylineno);
	$$ = new Type("BOOL");

    // HW5:
    m.bpatch($1->true_list,$3->label);
    $$->true_list = $4->true_list;
    $$->false_list = cf.merge($1->false_list,$4->false_list);
}
| Exp OR NewLabel Exp
{
	checkExpressionType($1,"BOOL",yylineno);
	checkExpressionType($4,"BOOL",yylineno);
	$$ = new Type("BOOL");
	// HW5:
    m.bpatch($1->false_list,$3->label);
    $$->true_list = cf.merge($1->true_list,$4->true_list);
    $$->false_list = $4->false_list;
}
| Exp RELOP Exp
{
    string type_right_exp = getExpType($3);
    string type_left_exp = getExpType($1);
 	if (type_right_exp!="INT" && type_right_exp!="BYTE") {errorMismatch(yylineno); exit(0);}
	if (type_left_exp!="INT" && type_left_exp!="BYTE") {errorMismatch(yylineno); exit(0);}
	$$ = new Type("BOOL");

    // HW5:
	NameTypeInfo* relop = dynamic_cast<NameTypeInfo*>($2);
	string op = relop->name;

	if (op == "<")
	    $$->true_list = cf.makelist(cf.emit("blt $" + convert_to_string($1->reg) + ", $" + convert_to_string($3->reg) + ",  "));
	if (op == "<=")
	    $$->true_list = cf.makelist(cf.emit("ble $" + convert_to_string($1->reg) + ", $" + convert_to_string($3->reg) + ",  "));
	if (op == ">")
	    $$->true_list = cf.makelist(cf.emit("bgt $" + convert_to_string($1->reg) + ", $" + convert_to_string($3->reg) + ",  "));
	if (op == ">=")
	    $$->true_list = cf.makelist(cf.emit("bge $" + convert_to_string($1->reg) + ", $" + convert_to_string($3->reg) + ",  "));

	$$->false_list = cf.makelist(cf.emit("j "));

	setRegister($1->reg,true);
	setRegister($3->reg,true);
}
;

%%

void yyerror(const char * message)
{
	errorSyn(yylineno);
	exit(0);
}


int main() {
	yyparse();

	//HW5
	cf.printDataBuffer();
	cf.printCodeBuffer();
}